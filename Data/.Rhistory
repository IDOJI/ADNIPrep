###############################################################################
# 1.6.Combine by each ROI
###############################################################################
# Combined_Signals_AD = Combine_by_each_ROI(Cut_Signals_AD)
# Combined_Signals_CN = Combine_by_each_ROI(Cut_Signals_CN)
y = Combined_Signals_AD[[1]][,10]
plot(y)
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20, save.path),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
lambdas
knots_length.out = 2:floor((length(y)/4))
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20, save.path),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
##############################################################################
GCVs = sapply(results.list, FUN=function(ith_results){
ith_results[[1]]$gcv
})
selected_results.list = results.list[[which.min(GCVs)]]
FDA___Smoothing___Plotting(y, knots = seq(1, length(y), length.out = selected_results.list$knots_length), smoothed = selected_results.list$smoothed, main = "")
FDA___Smoothing___Plotting = function(y, knots, smoothed, main, file.name=NULL, save.path=NULL){
if(is.null(file.name) || is.null(save.path)){
plot(x = 1:length(y), y = y, col = 2, main = main)
abline(v = knots, lty = 2, lwd = 1)
lines(smoothed, col = 4, lwd = 2)
}else{
png(filename = paste0(save.path, "/", file.name))
plot(x = 1:length(y), y = y, col = 2, main = main)
abline(v = knots, lty = 2, lwd = 1)
lines(smoothed, col = 4, lwd = 2)
dev.off()
}
}
FDA___Smoothing___Bspline___Pen.Second = function(y, lambda, length.out_seq = 2:floor((length(y)/3)), norders=4:20, save.path=NULL){
##############################################################################
### n_order
smoothed_norders.list = lapply(norders, FUN=function(ith_order, ...){
### knots
smoothed_knots.list = lapply(length.out_seq, FUN=function(jth_length.out, ...){
knots = seq(1, length(y), length.out = jth_length.out)
B_basis = create.bspline.basis(rangeval = c(1,length(y)), norder = ith_norder, breaks = knots)
penalty_Par = fdPar(B_basis, int2Lfd(2), lambda)
smoothed = tryCatch(smooth.basis(argvals = 1:length(y), y = y, fdParobj = penalty_Par),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
# main = paste0("order_", ith_order, "_", "length.out_", jth_length.out)
# FDA___Smoothing___Plotting(y, knots, smoothed, main, file.name = paste0(main, ".png"), save.path)
return(smoothed)
}) %>% rm_list_null
### selected minimum
which.min_gcv = FDA___Smoothing___Min.Criteria.For.List(smoothed_knots.list)
min_gcv_smoothed_knots.list = smoothed_knots.list[[which.min_gcv]]
min_gcv_norder = ith_order
min_gcv_lambda = lambda
min_gcv_knots_length = length.out_seq[which.min_gcv]
min_gcv_smoothed = list(smoothed = min_gcv_smoothed_knots.list,
norder = min_gcv_norder,
lambda = min_gcv_lambda,
knots_length = min_gcv_knots_length)
### plotting
FDA___Smoothing___Plotting(y = y,
knots = seq(1, length(y), length.out = length.out_seq[which.min_gcv]),
smoothed = smoothed_knots.list[[which.min_gcv]],
main = paste0("norder", "-", ith_order, "_", "knots.length", "-", length.out_seq[which.min_gcv], "_", "lambda", "-", lambda),
file.name = paste0("norder", "-", min_gcv_norder, "_", "knots.length", "-", length.out_seq[which.min_gcv], "_", "lambda", "-", lambda, ".png"),
save.path = save.path)
return(min_gcv_smoothed)
})
##############################################################################
GCVs = sapply(smoothed_norders.list, FUN=function(ith_smoothed.list){
ith_smoothed.list = smoothed_norders.list[[1]]
ith_smoothed.list$smoothed$gcv
})
##############################################################################
smoothed_norders.list[[which.min(GCVs)]]
}
results.list
FDA___Smoothing___Plotting(y, knots = seq(1, length(y), length.out = selected_results.list$knots_length), smoothed = selected_results.list$smoothed, main = paste0("norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda), file.name = paste0("norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda, ".png"), save.path = save.path)
FDA___Smoothing___Bspline = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, save.path){
##############################################################################
if(penalty.type == "harmonic" || penalty.type == "Harmonic"){
# results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
#   FDA___Smoothing___Bspline___Pen.Harmonic(y = y, nbasis = n_basis, lambda = ith_lambda) %>% suppressWarnings()
# })
}else if(penalty.type == "Second" || penalty.type == "second"){
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
}else if(is.null(penalty.type)){
}
### The minimum GCV & Plotting out
GCVs = sapply(results.list, FUN=function(ith_results){
ith_results[[1]]$gcv
})
selected_results.list = results.list[[which.min(GCVs)]]
FDA___Smoothing___Plotting(y, knots = seq(1, length(y), length.out = selected_results.list$knots_length), smoothed = selected_results.list$smoothed, main = paste0("norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda), file.name = paste0("norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda, ".png"), save.path = save.path)
###
return(selected_results.list)
}
opt_smoothing_1 = selected_results.list
plot(y)
lines(x = 1:length(y), y = opt_smoothing_1$y.hat, col="red")
FDA___Smoothing___Plotting(y = y,
knots = seq(1, length(y), length.out = opt_smoothing_1$knots_length),
smoothed = opt_smoothing_1$smoothed)
FDA___Smoothing___Plotting = function(y, knots, smoothed, main=NULL, file.name=NULL, save.path=NULL){
if(is.null(file.name) || is.null(save.path)){
plot(x = 1:length(y), y = y, col = 2, main = main)
abline(v = knots, lty = 2, lwd = 1)
lines(smoothed, col = 4, lwd = 2)
}else{
png(filename = paste0(save.path, "/", file.name))
plot(x = 1:length(y), y = y, col = 2, main = main)
abline(v = knots, lty = 2, lwd = 1)
lines(smoothed, col = 4, lwd = 2)
dev.off()
}
}
FDA___Smoothing___Plotting(y = y,
knots = seq(1, length(y), length.out = opt_smoothing_1$knots_length),
smoothed = opt_smoothing_1$smoothed)
log(opt_smoothing_1$lambda)
lambdas = exp(seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1))
seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1)
lambdas = exp(seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1))
opt_smoothing_2 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path)
penalty.type = "gcv"
penalty.type = "second"
opt_smoothing_2 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_2$knots_length), smoothed = opt_smoothing_2$smoothed)
log(opt_smoothing_2$lambda)
lambdas = exp(seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01))
seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01)
# log(opt_smoothing_2$lambda)
### seq_3 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01))
opt_smoothing_3 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
FDA___Smoothing___Bspline = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, file.name = NULL, save.path = NULL){
##############################################################################
if(penalty.type == "harmonic" || penalty.type == "Harmonic"){
# results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
#   FDA___Smoothing___Bspline___Pen.Harmonic(y = y, nbasis = n_basis, lambda = ith_lambda) %>% suppressWarnings()
# })
}else if(penalty.type == "Second" || penalty.type == "second"){
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
}else if(is.null(penalty.type)){
}
### The minimum GCV & Plotting out
GCVs = sapply(results.list, FUN=function(ith_results){
ith_results[[1]]$gcv
})
selected_results.list = results.list[[which.min(GCVs)]]
FDA___Smoothing___Plotting(y,
knots = seq(1, length(y), length.out = selected_results.list$knots_length),
smoothed = selected_results.list$smoothed,
main = paste0("norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda),
file.name = paste0(file.name, "___", "norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda, ".png"),
save.path = save.path)
###
return(selected_results.list)
}
file.name = "ROI001"
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
# log(opt_smoothing_3$lambda)
### seq_4 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_3$lambda) - 0.05 , log(opt_smoothing_3$lambda) + 0.05 , by = 0.001))
opt_smoothing_4 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, file.name, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_4$knots_length), smoothed = opt_smoothing_4$smoothed)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_4$knots_length), smoothed = opt_smoothing_4$smoothed, main = "", file.name = file.name, save.path = save.path)
FDA___Smoothing___Bspline___Total = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, file.name, save.path){
### seq_1 ============================================================================================
opt_smoothing_1 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_1$knots_length), smoothed = opt_smoothing_1$smoothed)
# log(opt_smoothing_1$lambda)
### seq_2 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1))
opt_smoothing_2 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_2$knots_length), smoothed = opt_smoothing_2$smoothed)
# log(opt_smoothing_2$lambda)
### seq_3 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01))
opt_smoothing_3 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
# log(opt_smoothing_3$lambda)
### seq_4 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_3$lambda) - 0.05 , log(opt_smoothing_3$lambda) + 0.05 , by = 0.001))
opt_smoothing_4 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, file.name, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_4$knots_length), smoothed = opt_smoothing_4$smoothed, main = "", file.name = file.name, save.path = save.path)
return(opt_smoothing_4)
}
length(Signals.list)
Signals.list[[1]]
Combined_Signals_AD
Signals.list = Combined_Signals_AD
Combined_Signals_AD[[1]]
ROIs = names(Signals.list)
ROIs
ith_Signals.list = Signals.list[[1]]
ith_Signals.list
RID = colnames(ith_Signals.list)
RID
ith_Signals.df = Signals.list[[1]]
RID = colnames(ith_Signals.df)
FDA___Smoothing___Bspline = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, main_prefix = "", file.name = NULL, save.path = NULL){
##############################################################################
if(penalty.type == "harmonic" || penalty.type == "Harmonic"){
# results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
#   FDA___Smoothing___Bspline___Pen.Harmonic(y = y, nbasis = n_basis, lambda = ith_lambda) %>% suppressWarnings()
# })
}else if(penalty.type == "Second" || penalty.type == "second"){
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
}else if(is.null(penalty.type)){
}
### The minimum GCV & Plotting out
GCVs = sapply(results.list, FUN=function(ith_results){
ith_results[[1]]$gcv
})
selected_results.list = results.list[[which.min(GCVs)]]
FDA___Smoothing___Plotting(y,
knots = seq(1, length(y), length.out = selected_results.list$knots_length),
smoothed = selected_results.list$smoothed,
main = paste0(main_prefix, "___norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda),
file.name = paste0(main_prefix, "___", file.name, "___", "norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda, ".png"),
save.path = save.path)
###
return(selected_results.list)
}
FDA___Smoothing___Bspline = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, file.name_prefix = NULL, save.path = NULL){
##############################################################################
if(penalty.type == "harmonic" || penalty.type == "Harmonic"){
# results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
#   FDA___Smoothing___Bspline___Pen.Harmonic(y = y, nbasis = n_basis, lambda = ith_lambda) %>% suppressWarnings()
# })
}else if(penalty.type == "Second" || penalty.type == "second"){
results.list = lapply(lambdas, FUN=function(ith_lambda, ...){
tryCatch(FDA___Smoothing___Bspline___Pen.Second(y, ith_lambda, length.out_seq = knots_length.out, norders = 4:20),
error = function(e){NULL},
warning = function(w){NULL},
finally = NULL)
}) %>% rm_list_null
}else if(is.null(penalty.type)){
}
### The minimum GCV & Plotting out
GCVs = sapply(results.list, FUN=function(ith_results){
ith_results[[1]]$gcv
})
selected_results.list = results.list[[which.min(GCVs)]]
FDA___Smoothing___Plotting(y,
knots = seq(1, length(y), length.out = selected_results.list$knots_length),
smoothed = selected_results.list$smoothed,
main = paste0(file.name_prefix, "___norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda),
file.name = paste0(file.name_prefix, "___", file.name, "___", "norder-", selected_results.list$norder, "_", "knots_length-", selected_results.list$knots_length, "_", "lambda-",selected_results.list$lambda, ".png"),
save.path = save.path)
###
return(selected_results.list)
}
FDA___Smoothing___Bspline___Total = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, file.name_prefix, save.path){
### seq_1 ============================================================================================
opt_smoothing_1 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_1$knots_length), smoothed = opt_smoothing_1$smoothed)
# log(opt_smoothing_1$lambda)
### seq_2 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1))
opt_smoothing_2 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_2$knots_length), smoothed = opt_smoothing_2$smoothed)
# log(opt_smoothing_2$lambda)
### seq_3 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01))
opt_smoothing_3 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
# log(opt_smoothing_3$lambda)
### seq_4 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_3$lambda) - 0.05 , log(opt_smoothing_3$lambda) + 0.05 , by = 0.001))
opt_smoothing_4 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, file.name, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_4$knots_length), smoothed = opt_smoothing_4$smoothed, file.name_prefix = file.name_prefix, save.path = save.path)
return(opt_smoothing_4)
}
i=1
ith_ROI_Signals.df = Signals.list[[i]]
ith_ROI_Signals.df
ith_RIDs = colnames(ith_ROI_Signals.df)
FDA___Smoothing___Bspline___Total = function(y, knots_length.out = 2:floor((length(y)/4)), lambdas, penalty.type = NULL, file.name_prefix=NULL, save.path=NULL){
### seq_1 ============================================================================================
opt_smoothing_1 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_1$knots_length), smoothed = opt_smoothing_1$smoothed)
# log(opt_smoothing_1$lambda)
### seq_2 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_1$lambda) - 5, log(opt_smoothing_1$lambda) + 5, by = 0.1))
opt_smoothing_2 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_2$knots_length), smoothed = opt_smoothing_2$smoothed)
# log(opt_smoothing_2$lambda)
### seq_3 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_2$lambda) - 0.5, log(opt_smoothing_2$lambda) + 0.5, by = 0.01))
opt_smoothing_3 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, save.path = save.path)
# FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_3$knots_length), smoothed = opt_smoothing_3$smoothed)
# log(opt_smoothing_3$lambda)
### seq_4 ============================================================================================
lambdas = exp(seq(log(opt_smoothing_3$lambda) - 0.05 , log(opt_smoothing_3$lambda) + 0.05 , by = 0.001))
opt_smoothing_4 = FDA___Smoothing___Bspline(y, knots_length.out, lambdas, penalty.type, file.name, save.path)
FDA___Smoothing___Plotting(y = y, knots = seq(1, length(y), length.out = opt_smoothing_4$knots_length), smoothed = opt_smoothing_4$smoothed)
return(opt_smoothing_4)
}
###############################################################################
# Defining functions
###############################################################################
Selecting_Specific_Data = function(data.list, which){
data.list_2 = list()
for(i in 1:length(data.list)){
ith_data = data.list[[i]]
if(class(ith_data) == "data.frame"){
data.list_2[[i]] = ith_data[which, ]
}else{
data.list_2[[i]] = ith_data[which]
}
}
names(data.list_2) = names(data.list)
return(data.list_2)
}
Cut_by_Min_Timepoints = function(Signals.list){
timepoints = sapply(Signals.list, FUN=function(ith){
ith %>% nrow
}) %>% table
min_timepoints = names(timepoints)[1] %>% as.numeric
Cut_Signals.list = lapply(Signals.list, FUN=function(ith, ...){
# ith = Signals.list[[1]]
ith[1:min_timepoints,]
})
return(Cut_Signals.list)
}
Combine_by_each_ROI = function(Signals.list){
Num_ROI = Signals.list[[1]] %>% ncol
Combined_data.list = list()
for(k in 1:Num_ROI){
kth_ROI = lapply(Signals.list, FUN=function(ith_Subject, ...){
# ith_Subject = Signals.list[[1]]
ith_Subject[k]
})
kth_ROI = do.call(cbind, kth_ROI)
colnames(kth_ROI) = names(Signals.list)
Combined_data.list[[k]] = kth_ROI
}
names(Combined_data.list) = paste0("ROI_", fit_length(1:Num_ROI, fit.num = nchar(Num_ROI)))
return(Combined_data.list)
}
###############################################################################
# 1.1.Loading packages
###############################################################################
# which_OS = Mac = "/Users/Ido/"
which_OS = Windows = "C:/Users/IDO/"
which_OS = Mac = "/Users/Ido/"
require(dplyr)
require(tidyverse)
require(fda)
list.files(paste0(which_OS, "/Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
list.files(paste0(which_OS, "/Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
###############################################################################
# 1.7.Load cut signals
###############################################################################
load(file = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/", "Cut_Signals_AD.rda"))
###############################################################################
# 1.7.Combine by each ROI
###############################################################################
Combined_Signals_AD = Combine_by_each_ROI(Cut_Signals_AD)
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
i=16 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=36 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=37 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=43 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=47 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=85 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=90 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=95 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=100 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=105 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=110 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
i=114 #15
Smoothed_Signals_AD.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_AD[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "AD",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_AD.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_AD.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
### CN
length(Combined_Signals_CN[[1]])
load(file = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/", "Cut_Signals_CN.rda"))
Combined_Signals_CN = Combine_by_each_ROI(Cut_Signals_CN)
### CN
length(Combined_Signals_CN[[1]])
for(i in 51:53){
Smoothed_Signals_CN.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_CN[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "CN",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_CN.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_CN.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
}
for(i in 54:57){
Smoothed_Signals_CN.list = FDA___Smoothing___Bspline___RS.fMRI.Signals.list(Signals.list = Combined_Signals_CN[i],
knots_length.out = 45:55,
lambdas = exp(seq(-3, 3, 1)),
penalty.type = "second",
file.name_prefix = "CN",
save.path = paste0(which_OS, "/Dropbox/Github/Rpkgs/Papers/figures/Functional_Data_Analysis"))
saving_data(rda.name = paste0("Bspline_Smoothed_Signals_CN.list", "_ROI_", fit_length(i, 3)), rda = Smoothed_Signals_CN.list, path = paste0(which_OS, "Dropbox/Github/Rpkgs/ADNIprep/Data/"))
}
