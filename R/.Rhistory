length(    ith_Loaded.ROISignals)
length(ith_Loaded.ROISignals)
ith_Loaded.ROISignals[[1]]
##############################################################################
### Files' list
##############################################################################
ROISignals.list = lapply(path_ROISignals.list, FUN=function(path_ith_ROISignals){
# path_ith_ROISignals = path_ROISignals.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Signals___Loading.Files(path_ith_ROISignals)
})
install.packages("read.table")
RS.fMRI_4.2_Extracting.Results___ROI.Signals___Loading.Files = function(path_files){
loaded_ROISignals = lapply(path_files, FUN=function(path_ith_file){
ith_file = read.table(path_ith_file)
names(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
return(ith_file)
})
return(loaded_ROISignals)
}
names(ROISignals.list)
ROISignals.list[[1]] %>% names
ith_ROISignals = ROISignals.list[[1]]
length(ith_ROISignals)
length(ROISignals.list)
i=1
names(ROISignals.list[[i]])
files_Norm.Pictures[[i]]
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROISignals.list)){
names(ROISignals.list[[i]]) = files_Norm.Pictures[[i]]
}
ROISignals.list[[2]]
RS.fMRI_4.2_Extracting.Results___ROI.Signals = function(path_Results.ROISignals, files_Norm.Pictures){
##############################################################################
### Files' list
##############################################################################
path_ROISignals.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROISignals_Sub*txt*"), full.names = T)
})
##############################################################################
### Files' list
##############################################################################
ROISignals.list = lapply(path_ROISignals.list, FUN=function(path_ith_ROISignals){
# path_ith_ROISignals = path_ROISignals.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Signals___Loading.Files(path_ith_ROISignals)
})
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROISignals.list)){
names(ROISignals.list[[i]]) = files_Norm.Pictures[[i]]
}
return(ROISignals.list)
}
Extracted_Data.list[[1]] = RS.fMRI_4.2_Extracting.Results___ROI.Signals(path_Results.ROISignals, files_Norm.Pictures)
Selected.list = rep(NA, length(scanners_band.type))
Selected.list = rep(NA, length(scanners_band.type)) %>% as.list
Selected.list
rep(NA, length(scanners_band.type)) %>% as.list
##############################################################################
# Each Scanner list
##############################################################################
scanners = c("SIEMENS", "Philips", "GE.MEDICAL.SYSTEMS")
scanners_band.type = sapply(scanners, FUN=function(ith){
c(paste0(ith, "_", "MB"), paste0(ith, "_", "SB")) %>% return
})
rep(NA, length(scanners_band.type)) %>% as.list
Selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(Selected.list)
##############################################################################
# create a list to save results
##############################################################################
Selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(Selected.list) = scanners_band.type
Selected.list
data.list = Extracted_Data.list[[1]]
length(data.list)
names(data.list)
preprocessed.folders = names(data.list)
preprocessed.folders
grep(scanners_band.type[i], preprocessed.folders)
i=1
grep(pattern = scanners_band.type[i], preprocessed.folders)
preprocessed.folders
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
##############################################################################
# Each Scanner list
##############################################################################
preprocessed.folders = names(data.list)
for(i in 1:length(scanners_band.type)){
selected.list[[i]]  = data.list[grep(pattern = scanners_band.type[i], preprocessed.folders)]
}
selected.list[1]
selected.list[2]
grep(pattern = scanners_band.type[i], preprocessed.folders)
which_selected_folders = grep(pattern = scanners_band.type[i], preprocessed.folders)
which_selected_folders
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NULL, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
selected.list
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
preprocessed.folders = names(data.list)
preprocessed.folders
length(which_selected_folders)>0
j=1
which_seleceted_folders[j]
which_selected_folders[j]
which_selected_folders
which_selected_folders[j]
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
##############################################################################
# Each Scanner list
##############################################################################
preprocessed.folders = names(data.list)
for(i in 1:length(scanners_band.type)){
which_selected_folders = grep(pattern = scanners_band.type[i], preprocessed.folders)
if(length(which_selected_folders)>0){
for(j in 1:length(which_selected_folders)){
selected.list[[i]] = c(selected.list[[i]], data.list[[which_selected_folders[j]]])
}
}
}
selected.list[[1]]
is.na(selected.list)
rep(NA, 3) %>% as.lsit
rep(NA, 3) %>% as.list
rep(NA, 3) %>% as.list %>% is.na
RmNA_seleceted.list = seleceted.list[!is.na(selected.list)]]
length(RmNA_seleceted.list)
RmNA_seleceted.list = seleceted.list[!is.na(selected.list)]
RmNA_seleceted.list = selected.list[!is.na(selected.list)]
length(  RmNA_seleceted.list)
RmNA_seleceted.list[[1]]
RmNA_seleceted.list[[1]][1]
RmNA_seleceted.list[[1]] %>% head
################################################################################
# 0. Loading functions
################################################################################
# rm(list=ls())
require(dplyr)
require(tidyverse)
require(openxlsx)
list.files("C:/Users/IDO/Dropbox/Github/Rpkgs/ADNIprep/R", full.names = T) %>% walk(source)
list.files("C:/Users/IDO/Dropbox/Github/Rpkgs/ADNIprep/R", full.names = T) %>% walk(source)
list.files("C:/Users/IDO/Dropbox/Github/Rpkgs/refineR/R", full.names = T) %>% walk(source)
path_completed.preprocessing = "C:/Users/IDO/Dropbox/패밀리룸/데이터(Data)/RS-fMRI_AAL116"
atals= "AAL116"
# path_completed.preprocessing = "C:/Users/IDO/Dropbox/패밀리룸/데이터(Data)/RS-fMRI_AAL116"
#==================================================================================================
# 1) Extract Results path & Norm pictures path
#==================================================================================================
path_Results = RS.fMRI_4.1_Extract.Path(path_completed.preprocessing, "Results")
path_Norm.Pictures = RS.fMRI_4.1_Extract.Path(path_completed.preprocessing, "Pictures")
cat("\n", crayon::red("Step 4.1"), crayon::yellow("Extracting"),  crayon::red("'Results'"),crayon::yellow("path of each folder"), crayon::blue("is done !!") ,"\n")
path_Norm.Pictures
##############################################################################
# path & save list
##############################################################################
Extracted_Data.list = list()
path_Results.ROISignals = lapply(path_Results, FUN=function(ith_path_Results){
list.files(ith_path_Results, pattern = glob2rx(paste0("*", "ROISignals", "*", atlas, "*")), full.names = T)
})
atlas="AAL116"
##############################################################################
# path & save list
##############################################################################
Extracted_Data.list = list()
path_Results.ROISignals = lapply(path_Results, FUN=function(ith_path_Results){
list.files(ith_path_Results, pattern = glob2rx(paste0("*", "ROISignals", "*", atlas, "*")), full.names = T)
})
path_Results.ROISignals
##############################################################################
# Norm pictures filenames
##############################################################################
files_Norm.Pictures = lapply(path_Norm.Pictures, FUN=function(ith_path_Norm.Pictures){
ith_Norm.Pictures = list.files(ith_path_Norm.Pictures, pattern="\\.tif$")
ith_Norm.Pictures = sub("\\..*$", "", basename(ith_Norm.Pictures))
return(ith_Norm.Pictures)
})
##############################################################################
### Files' list
##############################################################################
path_ROISignals.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROISignals_Sub*txt*"), full.names = T)
})
##############################################################################
### Files' list
##############################################################################
ROISignals.list = lapply(path_ROISignals.list, FUN=function(path_ith_ROISignals){
# path_ith_ROISignals = path_ROISignals.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Signals___Loading.Files(path_ith_ROISignals)
})
path_ROISignals.list
1
length(ROISignals.list)
ROISignals.list[[1]] %>% length
ROISignals.list[[1]][[1]]
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROISignals.list)){
names(ROISignals.list[[i]]) = files_Norm.Pictures[[i]]
}
RS.fMRI_4.2_Extracting.Results___ROI.Signals = function(path_Results.ROISignals, files_Norm.Pictures){
##############################################################################
### Files' list
##############################################################################
path_ROISignals.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROISignals_Sub*txt*"), full.names = T)
})
##############################################################################
### Files' list
##############################################################################
ROISignals.list = lapply(path_ROISignals.list, FUN=function(path_ith_ROISignals){
# path_ith_ROISignals = path_ROISignals.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Signals___Loading.Files(path_ith_ROISignals)
})
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROISignals.list)){
names(ROISignals.list[[i]]) = files_Norm.Pictures[[i]]
}
return(ROISignals.list)
}
Extracted_Data.list[[1]] = RS.fMRI_4.2_Extracting.Results___ROI.Signals(path_Results.ROISignals, files_Norm.Pictures)
names(Extracted_Data.list)[1] = "ROI Signals"
cat("\n", crayon::red("Step 4.2.1."), crayon::blue("Extracting"), crayon::yellow("ROI Signals"), crayon::blue("is done !!") ,"\n")
Extracted_Data.list[[1]][[1]][[1]]
matplot(Extracted_Data.list[[1]][[1]][[1]], type="l")
path_Results.ROISignals
path_ROISignals
path_Results.ROISignals
path_Results.ROISignals
##############################################################################
### Files' list
##############################################################################
path_ROICorr.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROICorrelation_Sub*txt*"), full.names = T)
})
path_ROICorr.list
RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files = function(path_files){
loaded_ROICorr = lapply(path_files, FUN=function(path_ith_file){
ith_file = read.table(path_ith_file, header = F)
colnames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
rownames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
return(ith_file)
})
return(loaded_ROICorr)
}
##############################################################################
### Loading files
##############################################################################
ROICorr.list = lapply(path_ROICorr.list, FUN=function(path_ith_ROICorr){
# path_ith_ROISignals = path_ROISignals.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
})
ROICorr.list[[1]][[1]][[1]]
path_ith_ROICorr = path_ROICorr.list[[1]]
path_ith_ROICorr
path_files = path_ith_ROICorr
path_files
path_ith_file = path_files[1]
path_ith_file
ith_file = read.table(path_ith_file, header = F)
ith_file
ith_file = read.table(path_ith_file, header = F) %>% as.matrix
ith_file
dim(ith_file)
colnames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
rownames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
ith_file
RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files = function(path_files){
loaded_ROICorr = lapply(path_files, FUN=function(path_ith_file){
ith_file = read.table(path_ith_file, header = F) %>% as.matrix
colnames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
rownames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
return(ith_file)
})
return(loaded_ROICorr)
}
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
length(ith_Loaded.ROISignals)
ith_Loaded.ROISignals[[1]]
RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files = function(path_files){
loaded_ROICorr = lapply(path_files, FUN=function(path_ith_file){
ith_file = read.table(path_ith_file, header = F) %>% as.matrix
colnames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
rownames(ith_file) = paste0("ROI_", fit_length(1:ncol(ith_file), nchar(ncol(ith_file))))
return(ith_file)
})
return(loaded_ROICorr)
}
##############################################################################
### Loading files
##############################################################################
ROICorr.list = lapply(path_ROICorr.list, FUN=function(path_ith_ROICorr){
# path_ith_ROICorr = path_ROICorr.list[[1]]
ith_Loaded.ROISignals = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
})
RS.fMRI_4.2_Extracting.Results___Pearson.Correlation = function(path_Results.ROISignals, files_Norm.Pictures){
##############################################################################
### Files' path list
##############################################################################
path_ROICorr.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROICorrelation_Sub*txt*"), full.names = T)
})
##############################################################################
### Loading files
##############################################################################
ROICorr.list = lapply(path_ROICorr.list, FUN=function(path_ith_ROICorr){
# path_ith_ROICorr = path_ROICorr.list[[1]]
ith_Loaded.ROICorr = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
})
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROICorr.list)){
names(ROICorr.list[[i]]) = files_Norm.Pictures[[i]]
}
return(ROICorr.list)
}
RS.fMRI_4.2_Extracting.Results___Pearson.Correlation = function(path_Results.ROISignals, files_Norm.Pictures){
##############################################################################
### Files' path list
##############################################################################
path_ROICorr.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROICorrelation_Sub*txt*"), full.names = T)
})
##############################################################################
### Loading files
##############################################################################
ROICorr.list = lapply(path_ROICorr.list, FUN=function(path_ith_ROICorr){
# path_ith_ROICorr = path_ROICorr.list[[1]]
ith_Loaded.ROICorr = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
})
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROICorr.list)){
names(ROICorr.list[[i]]) = files_Norm.Pictures[[i]]
}
return(ROICorr.list)
}
############################################################################
# 2) Pearson Correlation
############################################################################
Extracted_Data.list[[2]] = RS.fMRI_4.2_Extracting.Results___Pearson.Correlation(path_ROISignals, files_Norm.Pictures)
source("C:/Users/IDO/Dropbox/Github/Rpkgs/ADNIprep/R/RS.fMRI_4.2_Extracting.Results.R", echo=TRUE)
############################################################################
# 2) Pearson Correlation
############################################################################
Extracted_Data.list[[2]] = RS.fMRI_4.2_Extracting.Results___Pearson.Correlation(path_Results.ROISignals, files_Norm.Pictures)
names(Extracted_Data.list)[2] = "Pearson Correlation"
Extracted_Data.list[[2]][[1]][[1]]
RS.fMRI_4.2_Extracting.Results___Pearson.Correlation = function(path_Results.ROISignals, files_Norm.Pictures, FisherZ=F){
##############################################################################
### Files' path list
##############################################################################
if(FisherZ){
path_ROICorr.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROICorrelation_FisherZ_Sub*txt*"), full.names = T)
})
}else{
path_ROICorr.list = lapply(path_Results.ROISignals, FUN=function(ith_path_Results.ROISignals){
list.files(ith_path_Results.ROISignals, pattern=glob2rx("*ROICorrelation_Sub*txt*"), full.names = T)
})
}
##############################################################################
### Loading files
##############################################################################
ROICorr.list = lapply(path_ROICorr.list, FUN=function(path_ith_ROICorr){
# path_ith_ROICorr = path_ROICorr.list[[1]]
ith_Loaded.ROICorr = RS.fMRI_4.2_Extracting.Results___ROI.Corr___Loading.Files(path_ith_ROICorr)
})
##############################################################################
### Adding Sub names
##############################################################################
for(i in 1:length(ROICorr.list)){
names(ROICorr.list[[i]]) = files_Norm.Pictures[[i]]
}
return(ROICorr.list)
}
############################################################################
# 3) Pearson Correlation FisherZ
############################################################################
Extracted_Data.list[[3]] = RS.fMRI_4.2_Extracting.Results___Pearson.Correlation(path_Results.ROISignals, files_Norm.Pictures, FisherZ = T)
names(Extracted_Data.list)[3] = "FisherZ Pearson Correlation"
cat("\n", crayon::red("Step 4.2.3."), crayon::blue("Extracting"), crayon::yellow("FisherZ Pearson Correlation"), crayon::blue("is done !!") ,"\n")
Extracted_Data.list[[3]][[1]][[1]]
install.packages(rdrr.io)
install.packages("rdrr.io")
install.packages("gdata")
gdata::upperTriangle(Extracted_Data.list[[2]][[1]][[1]])
Extracted_Data.list[[2]][[1]][[1]]
Extracted_Corr.list = Extracted_Data.list[[2]]
length(Extracted_Corr.list)
test = Extracted_Data.list[[1]]
ROISignals.list %>% length
##############################################################################
# Each Scanner list
##############################################################################
scanners = c("SIEMENS", "Philips", "GE.MEDICAL.SYSTEMS")
scanners_band.type = sapply(scanners, FUN=function(ith){
c(paste0(ith, "_", "MB"), paste0(ith, "_", "SB")) %>% return
})
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
selected.list
data.list = Extracted_Data.list[[1]]
data.list = Extracted_Data.list[[2]]
length(data.list)
##############################################################################
# Each Scanner list
##############################################################################
scanners = c("SIEMENS", "Philips", "GE.MEDICAL.SYSTEMS")
scanners_band.type = sapply(scanners, FUN=function(ith){
c(paste0(ith, "_", "MB"), paste0(ith, "_", "SB")) %>% return
})
scanners_band.type
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
length(data.list)
names(data.list)
preprocessed.folders = names(data.list)
preprocessed.folders
i=1
which_selected_folders = grep(pattern = scanners_band.type[i], preprocessed.folders)
which_selected_folders
i=2
which_selected_folders = grep(pattern = scanners_band.type[i], preprocessed.folders)
which_selected_folders
scanners_band.type[i]
preprocessed.folders
data.list[[1]] %>% length
data.list[1,2] %>% length
data.list[c(1,2)] %>% length
data.list = data.list[c(1,2)]
unlist(data.list)
k=1
data.list[[k]] %>% length
combine_lists_as_list = function(data.list){
combined.list = list()
for(k in 1:length(data.list)){
combined.list = c(combined.list, data.list[[k]])
}
return(combined.list)
}
combine_lists_as_list = function(data.list){
combined.list = list()
for(k in 1:length(data.list)){
combined.list = c(combined.list, data.list[[k]])
}
return(combined.list)
}
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
##############################################################################
# Each Scanner list
##############################################################################
preprocessed.folders = names(data.list)
for(i in 1:length(scanners_band.type)){
which_selected_folders = grep(pattern = scanners_band.type[i], preprocessed.folders)
if(length(which_selected_folders)>0){
selected.list[[i]] = combine_lists_as_list(data.list[which_selected_folders])
}
}
selected.list[[1]]
require(dplyr)
selected.list[[2]]%>%length
is.na(selected.list)
test = selected.list[!is.na(selected.list)]
length(test)
is.na(selected.list)
##############################################################################
# create a list to save results
##############################################################################
selected.list = rep(NA, length(scanners_band.type)) %>% as.list
names(selected.list) = scanners_band.type
##############################################################################
# Each Scanner list
##############################################################################
scanners = c("SIEMENS", "Philips", "GE.MEDICAL.SYSTEMS")
scanners_band.type = sapply(scanners, FUN=function(ith){
c(paste0(ith, "_", "MB"), paste0(ith, "_", "SB")) %>% return
})
