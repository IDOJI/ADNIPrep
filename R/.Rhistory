## 🟨Loading packages ==========================================================
install_packages = function(packages, load=TRUE) {
# load : load the packages after installation?
for(pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
if(load){
library(pkg, character.only = TRUE)
}
}
}
visual = c("ggpubr", "ggplot2", "ggstatsplot", "ggsignif")
stat = c("fda")
data_handling = c("tidyverse", "dplyr", "clipr", "tidyr", "purrr")
qmd = c("janitor", "knitr")
texts = c("stringr")
files = c("fs")
packages_to_install_and_load = c(visual, stat, data_handling, qmd, texts, files)
install_packages(packages_to_install_and_load)
# 🟥 Load data ##############################################################
# Selected_data: one RID + one VISCODE
# Final data: All VISCODE
data = readRDS("/Users/Ido/Library/CloudStorage/Dropbox/2.DataAnalysis/ADNI/SubjectsList/Results/Selected_Data(A specific visit).rds")
# 🟥 Load data ##############################################################
# Selected_data: one RID + one VISCODE
# Final data: All VISCODE
data = readRDS("/Users/Ido/Documents/GitHub/Obsidian_250507/☔️Papers_DataAnalysis/㊗️ADNI_RS-fMRI/✴️(@완료)1.Subjects List/✅⭐️최종 선택 리스트/attachments/Selected_Data(A specific visit).rds")
epb = data$epb
mt1 = data$mt1
new_ImageID = data$NewlySelectedImageID
path_adni = "/Volumes/ADNISB_SSD_NTFS_4TB_Sandisk/RS.fMRI_NewlyDownloaded_previous/test"
## 🟧 check =============================================================================================================================
epb %>% filter(RID==4225) %>% View
mt1 %>% filter(RID==4225) %>% View
epb %>% filter(RID==5158) %>% View
mt1 %>% filter(RID==5158) %>% View
epb
filter = dplyr::filter
select = dplyr::select
path_adni = "/Volumes/ADNISB_SSD_NTFS_4TB_Sandisk/RS.fMRI_NewlyDownloaded_previous/test"
## 🟧 check =============================================================================================================================
epb %>% filter(RID==4225) %>% View
## 🟧 Change Series Description ========================================================================================================
# ( 또는 ) -> _
# 공백 -> _
# epb 데이터 프레임을 수정하고 QC___SERIES_DESCRIPTION 열을 변환
epb <- epb %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
# MT1
mt1 <- mt1 %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
## 🟧 Filter by Subjects ID =========================================================================================================
included_subjects = list.files(path_adni, pattern = "_S_") %>% sort
path_included_subjects = list.files(path_adni, pattern = "_S_", full.names = T) %>% sort
included_subjects_epb = epb %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
included_subjects_mt1 = mt1 %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
if(!sum(included_subjects_mt1$SEARCH___SUBJECT.ID == included_subjects_epb$SEARCH___SUBJECT.ID) == nrow(included_subjects_epb)){
stop("!!")
}
if(!sum(included_subjects==included_subjects_mt1$SEARCH___SUBJECT.ID) == nrow(included_subjects_mt1)){
stop("!!")
}
included_subjects_epb %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
included_subjects_mt1 %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
## 🟧 ⭐️Change Path of each image ID folder =========================================================================================================
# 결과를 저장할 빈 리스트
# 각 개체 별로 같은 이름의 폴더에서
# ImageID 폴더를 찾아서
# 경로 자체를 변경하는 방식으로 파일들을
# FunRaw/Sub_000, T1Raw/Sub_000에 옮긴다.
for(i in 1:nrow(included_subjects_epb)){
### 🟩 ith path  ====================================================
ith_path = path_included_subjects[i]
### 🟩 ith subjects  ===================================================
ith_epb = included_subjects_epb[i, ]
ith_mt1 = included_subjects_mt1[i, ]
ith_epb $VISCODE2
ith_epb$IMAGE.ID
### 🟩 Extract Image ID  ====================================================
ith_imageID_epb = ith_epb$IMAGE.ID
ith_imageID_mt1 = ith_mt1$IMAGE.ID
### 🟩 ImageID folder path  ====================================================
ith_imageID_epb_path <- dir_ls(path = ith_path,
regexp = ith_imageID_epb,
type = "directory",
recurse = T)
ith_imageID_mt1_path <- dir_ls(path = ith_path,
regexp = ith_imageID_mt1,
type = "directory",
recurse = T)
if(length(ith_imageID_epb_path)==0 | length(ith_imageID_mt1_path) == 0){
stop("!!!!")
}
### 🟩 Series description path  ====================================================
ith_description_epb_path = dir_ls(path = ith_path,
regexp = ith_epb$QC___SERIES_DESCRIPTION_2,
type = "directory")
ith_description_mt1_path = dir_ls(path = ith_path,
regexp = ith_mt1$QC___SERIES_DESCRIPTION_2,
type = "directory")
if(length(ith_description_mt1_path)==0 | length(ith_description_epb_path) == 0){
stop(paste0(ith_path, " has different name with either MT1 or EPB description !"))
}
### 🟩 💠Change directory  ====================================================
# FunRaw
ith_FunRaw_Sub_path = paste0(ith_path, "/FunRaw/", ith_epb$DPABI)
dir.create(ith_FunRaw_Sub_path, F, T)
if(file.rename(from = ith_imageID_epb_path,
to = ith_FunRaw_Sub_path)){
unlink(ith_description_epb_path, T)
}else{
stop(paste0(i, " EPB!!!!"))
unlink(ith_FunRaw_Sub_path, T)
}
# T1Raw
ith_T1Raw_Sub_path = paste0(ith_path, "/T1Raw/", ith_epb$DPABI)
dir.create(ith_T1Raw_Sub_path, F, T)
if(file.rename(from = ith_imageID_mt1_path,
to = ith_T1Raw_Sub_path)){
unlink(ith_description_mt1_path, T)
}else{
unlink(ith_T1Raw_Sub_path)
stop(paste0(i, " MT1!!!!"))
}
### 🟩 💠Change subject dir  ====================================================
file.rename(from = ith_path,
to = paste0(path_adni, "/", ith_epb$FILE.NAME))
cat("\n", crayon::red(ith_epb$SEARCH___SUBJECT.ID), crayon::green("is done!"),"\n")
}
path_adni = "/Volumes/ADNISB_SSD_NTFS_4TB_Sandisk/RS.fMRI_NewlyDownloaded_previous/ADNI"
## 🟧 check =============================================================================================================================
epb %>% filter(RID==4225) %>% View
## 🟧 Change Series Description ========================================================================================================
# ( 또는 ) -> _
# 공백 -> _
# epb 데이터 프레임을 수정하고 QC___SERIES_DESCRIPTION 열을 변환
epb <- epb %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
# MT1
mt1 <- mt1 %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
## 🟧 Filter by Subjects ID =========================================================================================================
included_subjects = list.files(path_adni, pattern = "_S_") %>% sort
path_included_subjects = list.files(path_adni, pattern = "_S_", full.names = T) %>% sort
included_subjects_epb = epb %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
included_subjects_mt1 = mt1 %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
if(!sum(included_subjects_mt1$SEARCH___SUBJECT.ID == included_subjects_epb$SEARCH___SUBJECT.ID) == nrow(included_subjects_epb)){
stop("!!")
}
if(!sum(included_subjects==included_subjects_mt1$SEARCH___SUBJECT.ID) == nrow(included_subjects_mt1)){
stop("!!")
}
included_subjects_epb %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
included_subjects_mt1 %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
## 🟧 ⭐️Change Path of each image ID folder =========================================================================================================
# 결과를 저장할 빈 리스트
# 각 개체 별로 같은 이름의 폴더에서
# ImageID 폴더를 찾아서
# 경로 자체를 변경하는 방식으로 파일들을
# FunRaw/Sub_000, T1Raw/Sub_000에 옮긴다.
for(i in 1:nrow(included_subjects_epb)){
### 🟩 ith path  ====================================================
ith_path = path_included_subjects[i]
### 🟩 ith subjects  ===================================================
ith_epb = included_subjects_epb[i, ]
ith_mt1 = included_subjects_mt1[i, ]
ith_epb $VISCODE2
ith_epb$IMAGE.ID
### 🟩 Extract Image ID  ====================================================
ith_imageID_epb = ith_epb$IMAGE.ID
ith_imageID_mt1 = ith_mt1$IMAGE.ID
### 🟩 ImageID folder path  ====================================================
ith_imageID_epb_path <- dir_ls(path = ith_path,
regexp = ith_imageID_epb,
type = "directory",
recurse = T)
ith_imageID_mt1_path <- dir_ls(path = ith_path,
regexp = ith_imageID_mt1,
type = "directory",
recurse = T)
if(length(ith_imageID_epb_path)==0 | length(ith_imageID_mt1_path) == 0){
stop("!!!!")
}
### 🟩 Series description path  ====================================================
ith_description_epb_path = dir_ls(path = ith_path,
regexp = ith_epb$QC___SERIES_DESCRIPTION_2,
type = "directory")
ith_description_mt1_path = dir_ls(path = ith_path,
regexp = ith_mt1$QC___SERIES_DESCRIPTION_2,
type = "directory")
if(length(ith_description_mt1_path)==0 | length(ith_description_epb_path) == 0){
stop(paste0(ith_path, " has different name with either MT1 or EPB description !"))
}
### 🟩 💠Change directory  ====================================================
# FunRaw
ith_FunRaw_Sub_path = paste0(ith_path, "/FunRaw/", ith_epb$DPABI)
dir.create(ith_FunRaw_Sub_path, F, T)
if(file.rename(from = ith_imageID_epb_path,
to = ith_FunRaw_Sub_path)){
unlink(ith_description_epb_path, T)
}else{
stop(paste0(i, " EPB!!!!"))
unlink(ith_FunRaw_Sub_path, T)
}
# T1Raw
ith_T1Raw_Sub_path = paste0(ith_path, "/T1Raw/", ith_epb$DPABI)
dir.create(ith_T1Raw_Sub_path, F, T)
if(file.rename(from = ith_imageID_mt1_path,
to = ith_T1Raw_Sub_path)){
unlink(ith_description_mt1_path, T)
}else{
unlink(ith_T1Raw_Sub_path)
stop(paste0(i, " MT1!!!!"))
}
### 🟩 💠Change subject dir  ====================================================
file.rename(from = ith_path,
to = paste0(path_adni, "/", ith_epb$FILE.NAME))
cat("\n", crayon::red(ith_epb$SEARCH___SUBJECT.ID), crayon::green("is done!"),"\n")
}
path_adni = "/Volumes/ADNISB_SSD_NTFS_4TB_Sandisk/RS.fMRI_NewlyDownloaded_previous/ADNI"
## 🟧 Change Series Description ========================================================================================================
# ( 또는 ) -> _
# 공백 -> _
# epb 데이터 프레임을 수정하고 QC___SERIES_DESCRIPTION 열을 변환
epb <- epb %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
# MT1
mt1 <- mt1 %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
## 🟧 Filter by Subjects ID =========================================================================================================
included_subjects = list.files(path_adni, pattern = "_S_") %>% sort
path_included_subjects = list.files(path_adni, pattern = "_S_", full.names = T) %>% sort
included_subjects_epb = epb %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
included_subjects_mt1 = mt1 %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
if(!sum(included_subjects_mt1$SEARCH___SUBJECT.ID == included_subjects_epb$SEARCH___SUBJECT.ID) == nrow(included_subjects_epb)){
stop("!!")
}
if(!sum(included_subjects==included_subjects_mt1$SEARCH___SUBJECT.ID) == nrow(included_subjects_mt1)){
stop("!!")
}
included_subjects_epb %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
included_subjects_mt1 %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
i=1
### 🟩 ith path  ====================================================
ith_path = path_included_subjects[i]
ith_path
### 🟩 ith subjects  ===================================================
ith_epb = included_subjects_epb[i, ]
ith_mt1 = included_subjects_mt1[i, ]
ith_epb $VISCODE2
ith_epb$IMAGE.ID
### 🟩 Extract Image ID  ====================================================
ith_imageID_epb = ith_epb$IMAGE.ID
ith_imageID_mt1 = ith_mt1$IMAGE.ID
### 🟩 ImageID folder path  ====================================================
ith_imageID_epb_path <- dir_ls(path = ith_path,
regexp = ith_imageID_epb,
type = "directory",
recurse = T)
ith_imageID_mt1_path <- dir_ls(path = ith_path,
regexp = ith_imageID_mt1,
type = "directory",
recurse = T)
ith_imageID_epb_path
ith_imageID_mt1_path
ith_imageID_epb
ith_imageID_mt1
ith_imageID_epb_path
basename(ith_imageID_epb_path) != ith_imageID_epb
if(basename(ith_imageID_mt1_path) != ith_imageID_mt1){
stop("MT1 is different!")
}
### 🟩 Series description path  ====================================================
ith_description_epb_path = dir_ls(path = ith_path,
regexp = ith_epb$QC___SERIES_DESCRIPTION_2,
type = "directory")
ith_description_mt1_path = dir_ls(path = ith_path,
regexp = ith_mt1$QC___SERIES_DESCRIPTION_2,
type = "directory")
if(length(ith_description_mt1_path)==0 | length(ith_description_epb_path) == 0){
stop(paste0(ith_path, " has different name with either MT1 or EPB description !"))
}
ith_description_mt1_path
ith_description_epb_path
ith_epb$QC___SERIES_DESCRIPTION_2
## 🟧 Change Series Description ========================================================================================================
# ( 또는 ) -> _
# 공백 -> _
# epb 데이터 프레임을 수정하고 QC___SERIES_DESCRIPTION 열을 변환
epb <- epb %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2),
QC___SERIES_DESCRIPTION_2 = gsub(">", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
# MT1
mt1 <- mt1 %>%
mutate(QC___SERIES_DESCRIPTION_2 = gsub("\\(", "_", QC___SERIES_DESCRIPTION), # '('를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub("\\)", "_", QC___SERIES_DESCRIPTION_2), # ')'를 '_'로 변경
QC___SERIES_DESCRIPTION_2 = gsub(" ", "_", QC___SERIES_DESCRIPTION_2),
QC___SERIES_DESCRIPTION_2 = gsub(">", "_", QC___SERIES_DESCRIPTION_2)) %>% # 공백을 '_'로 변경
relocate(QC___SERIES_DESCRIPTION_2, .before = QC___SERIES_DESCRIPTION) # 새 열을 원래 열 바로 앞으로 이동
## 🟧 Filter by Subjects ID =========================================================================================================
included_subjects = list.files(path_adni, pattern = "_S_") %>% sort
path_included_subjects = list.files(path_adni, pattern = "_S_", full.names = T) %>% sort
included_subjects_epb = epb %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
included_subjects_mt1 = mt1 %>%
filter(SEARCH___SUBJECT.ID %in% included_subjects) %>%
arrange(SEARCH___SUBJECT.ID)
if(!sum(included_subjects_mt1$SEARCH___SUBJECT.ID == included_subjects_epb$SEARCH___SUBJECT.ID) == nrow(included_subjects_epb)){
stop("!!")
}
if(!sum(included_subjects==included_subjects_mt1$SEARCH___SUBJECT.ID) == nrow(included_subjects_mt1)){
stop("!!")
}
included_subjects_epb %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
included_subjects_mt1 %>% filter(RID==4225) %>% pull(QC___SERIES_DESCRIPTION_2)
### 🟩 ith path  ====================================================
ith_path = path_included_subjects[i]
### 🟩 ith subjects  ===================================================
ith_epb = included_subjects_epb[i, ]
ith_mt1 = included_subjects_mt1[i, ]
### 🟩 Extract Image ID  ====================================================
ith_imageID_epb = ith_epb$IMAGE.ID
ith_imageID_mt1 = ith_mt1$IMAGE.ID
### 🟩 ImageID folder path  ====================================================
ith_imageID_epb_path <- dir_ls(path = ith_path,
regexp = ith_imageID_epb,
type = "directory",
recurse = T)
ith_imageID_mt1_path <- dir_ls(path = ith_path,
regexp = ith_imageID_mt1,
type = "directory",
recurse = T)
if(length(ith_imageID_epb_path)==0 | length(ith_imageID_mt1_path) == 0){
stop("!!!!")
}
if(basename(ith_imageID_epb_path) != ith_imageID_epb){
stop("EPB is different!")
}
if(basename(ith_imageID_mt1_path) != ith_imageID_mt1){
stop("MT1 is different!")
}
### 🟩 Series description path  ====================================================
ith_description_epb_path = dir_ls(path = ith_path,
regexp = ith_epb$QC___SERIES_DESCRIPTION_2,
type = "directory")
ith_description_mt1_path = dir_ls(path = ith_path,
regexp = ith_mt1$QC___SERIES_DESCRIPTION_2,
type = "directory")
if(length(ith_description_mt1_path)==0 | length(ith_description_epb_path) == 0){
stop(paste0(ith_path, " has different name with either MT1 or EPB description !"))
}
ith_FunRaw_Sub_path
## 🟧 ⭐️Change Path of each image ID folder =========================================================================================================
# 결과를 저장할 빈 리스트
# 각 개체 별로 같은 이름의 폴더에서
# ImageID 폴더를 찾아서
# 경로 자체를 변경하는 방식으로 파일들을
# FunRaw/Sub_000, T1Raw/Sub_000에 옮긴다.
for(i in 1:nrow(included_subjects_epb)){
### 🟩 ith path  ====================================================
ith_path = path_included_subjects[i]
### 🟩 ith subjects  ===================================================
ith_epb = included_subjects_epb[i, ]
ith_mt1 = included_subjects_mt1[i, ]
### 🟩 Extract Image ID  ====================================================
ith_imageID_epb = ith_epb$IMAGE.ID
ith_imageID_mt1 = ith_mt1$IMAGE.ID
### 🟩 ImageID folder path  ====================================================
ith_imageID_epb_path <- dir_ls(path = ith_path,
regexp = ith_imageID_epb,
type = "directory",
recurse = T)
ith_imageID_mt1_path <- dir_ls(path = ith_path,
regexp = ith_imageID_mt1,
type = "directory",
recurse = T)
if(length(ith_imageID_epb_path)==0 | length(ith_imageID_mt1_path) == 0){
stop("!!!!")
}
if(basename(ith_imageID_epb_path) != ith_imageID_epb){
stop("EPB is different!")
}
if(basename(ith_imageID_mt1_path) != ith_imageID_mt1){
stop("MT1 is different!")
}
### 🟩 Series description path  ====================================================
ith_description_epb_path = dir_ls(path = ith_path,
regexp = ith_epb$QC___SERIES_DESCRIPTION_2,
type = "directory")
ith_description_mt1_path = dir_ls(path = ith_path,
regexp = ith_mt1$QC___SERIES_DESCRIPTION_2,
type = "directory")
if(length(ith_description_mt1_path)==0 | length(ith_description_epb_path) == 0){
stop(paste0(ith_path, " has different name with either MT1 or EPB description !"))
}
### 🟩 💠Change directory  ====================================================
# FunRaw
ith_FunRaw_Sub_path = paste0(ith_path, "/FunRaw/", ith_epb$DPABI)
dir.create(ith_FunRaw_Sub_path, F, T)
if(file.rename(from = ith_imageID_epb_path,
to = ith_FunRaw_Sub_path)){
unlink(ith_description_epb_path, T)
}else{
stop(paste0(i, " EPB!!!!"))
unlink(ith_FunRaw_Sub_path, T)
}
# T1Raw
ith_T1Raw_Sub_path = paste0(ith_path, "/T1Raw/", ith_epb$DPABI)
dir.create(ith_T1Raw_Sub_path, F, T)
if(file.rename(from = ith_imageID_mt1_path,
to = ith_T1Raw_Sub_path)){
unlink(ith_description_mt1_path, T)
}else{
unlink(ith_T1Raw_Sub_path)
stop(paste0(i, " MT1!!!!"))
}
### 🟩 💠Change subject dir  ====================================================
file.rename(from = ith_path,
to = paste0(path_adni, "/", ith_epb$FILE.NAME))
cat("\n", crayon::red(ith_epb$SEARCH___SUBJECT.ID), crayon::green("is done!"),"\n")
}
source("~/Documents/GitHub/Obsidian_250507/☔️Papers_DataAnalysis/㊗️ADNI_RS-fMRI/✴️2.Preprocessing/⭐️R코드/attachments/Generate.Slice.Timing.Information.r", echo=TRUE)
# 🟥 Define function =======================================================================================================
Generate.Slice.Timing.Information = function(path_data){
# 🟧files list #############################################################################################
sub_folders = list.files(path_data, pattern = "Sub_")
path_sub_folders = list.files(path_data, pattern = "Sub_", full.names=T)
# 🟧"Sub_000" 넘버링 추출 #############################################################################################
# "Sub_" 뒤에 오는 숫자들을 포함하여 추출
extracted_sub_numbering = sapply(sub_folders, function(each_folder){
sub(".*(Sub_\\d+).*", "\\1", each_folder)
}) %>% unname()
# 🟧Generate tsv files #############################################################################################
for(i in seq_along(extracted_sub_numbering)){
SliceOrderInfo = cbind("Subject ID" = extracted_sub_numbering[i], "Slice Order Type" = "IA")
write.table(SliceOrderInfo, file.path(path_sub_folders[i], "SliceOrderInfo.tsv"), row.names=F, quote=F, sep="\t")
cat("\n", crayon::yellow("Generating"), crayon::red("SliceOrderInfo.tsv"), crayon::yellow("is done : "), crayon::bgRed(extracted_sub_numbering[i]) ,"\n")
}
cat("\n", crayon::blue("Generating"), crayon::bgRed("SliceOrderInfo.tsv"), crayon::blue("is done!"), "\n")
}
# 🟥 Philips_New =======================================================================================================
path = "/Volumes/ADNISB_SSD_NTFS_4TB_Sandisk/RS.fMRI_NewlyDownloaded_previous/Philips"
Generate.Slice.Timing.Information(path)
